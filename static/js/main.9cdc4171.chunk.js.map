{"version":3,"sources":["pokemon-logo.svg","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","div","_templateObject","Header","header","_templateObject2","Main","main","_templateObject3","Logo","img","_templateObject4","PokemonList","ul","_templateObject5","PokemonItem","li","_templateObject6","PokemonImg","_templateObject7","PokemonName","h3","_templateObject8","API_URL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getPokemon","asyncToGenerator","regenerator_default","a","mark","_callee","offset","limit","result","results","fetchArray","pokemonDetails","pokemon","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","concat","then","res","json","sent","reduce","acc","_ref2","url","push","Promise","all","map","_ref3","name","experience","base_experience","_ref3$sprites","sprites","frontImage","front_default","backImage","back_default","setState","stop","capitalize","str","charAt","toUpperCase","slice","state","_this2","react_default","createElement","src","logo","alt","_ref4","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cdc4171.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon-logo.3cfd5e85.svg\";","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  /* height: 100%; */\n`\n\nexport const Header = styled.header`\n  width: 100%;\n  text-align: center;\n  padding: 3rem 0; \n`\n\nexport const Main = styled.main `\n  width: 90%;\n  margin: 0 auto;\n`\n\nexport const Logo = styled.img``\n\nexport const PokemonList = styled.ul `\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nexport const PokemonItem = styled.li `\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px 20px;\n  min-height: 20vh;\n  > div {\n    /* width: 90px;\n    transition: width .2s ease-in-out; */\n    img:first-child {\n      display: none;\n    }\n  }\n  &:hover {\n    cursor: pointer;\n    > div {\n      /* width: 100px; */\n      img:first-child {\n        display: block;\n      }\n      img:last-child {\n        display: none;\n      }\n    }\n    img {\n      \n    }\n    h3 {\n      text-shadow: 1px 1px 1px #434354; \n    }\n  }  \n`\n\nexport const PokemonImg = styled.img `\n  width: 100%;\n  display: block;\n`\nexport const PokemonName = styled.h3 `\n  color: white;\n  font-style: normal;\n  text-shadow: 1px 1px 1px #4d4b8c; \n  margin-bottom: 0;\n`\n","import React, { Component } from 'react';\nimport logo from './pokemon-logo.svg';\nimport {\n  Container,\n  Header,\n  Logo,\n  Main,\n  PokemonList,\n  PokemonItem,\n  PokemonImg,\n  PokemonName,\n} from './App.styles'\n\nconst API_URL = 'https://pokeapi.co/api/v2';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n       pokemon: [],\n    }\n  }\n  \n  getPokemon = async (offset = 20, limit= 20) => {\n    // get the basic pokemon list (name, url)\n    const result = await fetch(`${API_URL}/pokemon/?offset=${offset}0&limit=${limit}`).then(res => res.json())\n    const { results } = result \n    // from results create array of promises for each pokemn's details\n    const fetchArray = results.reduce((acc, { url }) => {\n      acc.push(fetch(url).then(res => res.json()))\n      return acc;\n    }, [])\n    // async fetch all, extract and store in state \n    const pokemonDetails = await Promise.all(fetchArray) // should probably catch errors here\n    const pokemon = pokemonDetails.map(({\n      name,\n      base_experience: experience,\n      sprites: {\n        front_default: frontImage,\n        back_default: backImage,\n      },\n    }) => {\n      return {\n        name,\n        experience,\n        frontImage,\n        backImage,\n      }\n    })\n    \n    this.setState({ pokemon })\n  }\n\n  componentDidMount() {\n    this.getPokemon()\n  }\n\n  capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)\n\n  render() {\n    return (\n    <Container>\n      <Header>\n        <Logo src={logo} alt=\"logo\" />\n      </Header>\n      <Main>\n        <PokemonList>\n          {\n            this.state.pokemon.map(({ name, frontImage, backImage }) => (\n              <PokemonItem key={name}>\n                <div>\n                  <PokemonImg src={frontImage} alt=\"front avatar\" />\n                  <PokemonImg src={backImage} alt=\"back avatar\"/>\n                </div>\n                <PokemonName>{this.capitalize(name)}</PokemonName>\n              </PokemonItem>\n            ))\n          }\n        </PokemonList>\n      </Main>\n    </Container>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}